"""
Auto generate parts of keystore.go file
Creates slice of ints that contains obfuscated master pass phrase
Creates slice of ints that contains obfuscated public key
"""
import random
from textwrap import dedent


def get_public_key():
    with open('keys/public.pem') as fd:
        return fd.read().strip()


def get_secret():
    return 'TomaszBigSecret'


def obfuscate_string(text):
    # convert to bytes
    if hasattr(text, 'encode'):
        text = text.encode('utf8')

    constant = random.randint(2000, 10000)

    return [byte_ + constant + i for i, byte_ in enumerate(text)] + [constant]


def reverse_obfuscation(bytes_):
    constant = bytes_.pop()
    return bytes([byte_ - constant - i for i, byte_ in enumerate(bytes_)])


def produce_function(numbers, func_name):
    templ = dedent("""
    // {name} autogenerated do not edit
    func {name}() []int {{
    \treturn []int{numbers}
    }}
    """).strip()
    numbers = '{' + ','.join(map(str, numbers)) + '}'
    return templ.format(name=func_name, numbers=numbers)


def replace_function(func_name, func_text, code_file_name):
    content = []
    start = end = -1
    with open(code_file_name, 'r') as fd:
        for i, line in enumerate(fd):
            if f'func {func_name}' in line:
                start = i - 1
            if end == -1 and start > -1 and line.startswith('}'):
                end = i
            content.append(line.rstrip())

    if -1 in (start, end):
        raise RuntimeError(f"We could not find the function to replace {func_name}")

    out = content[:start] + func_text.split('\n') + content[end+1:]
    with open(code_file_name, 'w') as fd:
        fd.truncate()
        for line in out:
            fd.write(f'{line}\n')


def insert_password(password, func_name):
    numbers = obfuscate_string(password)
    func_text = produce_function(numbers, func_name)
    replace_function(func_name, func_text, 'keystore.go')


if __name__ == '__main__':
    key = get_public_key()
    ob = obfuscate_string(get_public_key())
    deob = reverse_obfuscation(ob).decode('utf8')
    insert_password(get_public_key(), 'getPublicKey')
    insert_password(get_secret(), 'getSecret')
